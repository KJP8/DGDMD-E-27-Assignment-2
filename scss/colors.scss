// Copied from Natalya Shelburne
// http://tallys.github.io/color-theory/
// https://github.com/tallys/color-theory/blob/master/source/stylesheets/_variables.scss

// Include normalize, bourbon, and neat css files
@import "normalize";
@import "bourbon";
@import "neat";
// Include variables and mixins
@import "filemanagement/variables";
@import "filemanagement/mixins";

// Pick a starting color to mix with and select a hue between 0-360 (check the color wheel!)
$first-color: hsl(190, 100%, 50%);
// Find the hue 180 degrees away on the color wheel
$second-color: complement($first-color);

// Check if the color is a cool color
@function is-cool-color($color) {
	@return hue($color) < 300 and hue($color) > 120;
}

// Check if the color is high value or low value
@function is-high-key-value($color) {
	@return hue($color) > 30 and hue($color) < 140;
}

//Establish a relationship (similar lighting conditions) between colors.
@function harmonious-mix($mix, $base) {
	@if (is-cool-color($mix)){
		@if is-high-key-value($base) {
			@return mix($mix, $base, 11%);
		}
		@else {
			@return mix($mix, $base, 16%);
		}
	}
	@else {
		@if is-high-key-value($base) {
			@return mix($mix, $base, 13%);
		}
		@else {
			@return mix($mix, $base, 23%);
		}
	}
}

// Create neutrals
@function mix-neutral($color) {
	@if (is-highest-key-value($color)) {
		@if is-high-key-value(complement($color)) {
			@return mix(complement($color), $color, 19%);
		}
		@else {
			@return mix(complement($color), $color, 13%);
		}
	}
	@else if (is-high-key-value($color)) {
		@if is-high-key-value(complement($color)) {
			@return mix(complement($color), $color, 31%);
		}
		@else {
			@return mix(complement($color), $color, 23%);
		}
	}
	@else {
		@if is-highest-key-value(complement($color)) {
			@return mix(complement($color), $color, 31%);
		}
		@if is-high-key-value(complement($color)) {
			@return mix(complement($color), $color, 26%);
		}
		@else {
			@return mix(complement($color), $color, 23%);
		}
	}
}

// Create contrast
@function pick-contrast($color) {
	@if is-high-key-value($color){
		@if lightness($color) < 30% {
			@return lighten(complement($color), 86);
		}
		@else if lightness($color) > 70% {
			@return darken(complement($color), 68);
		}
		@else {
			@return darken(complement($color), 53);
		}
} @else {
	@if lightness($color) < 30% {
			@return lighten(complement($color), 86);
		}
		@else if lightness($color) > 70% {
			@return darken(complement($color), 68);
		}
		@else {
			@return lighten(complement($color), 53);
		}
	}
}

// Primary and complimentary colors

$primary-color: harmonious-mix($second-color, $first-color);
$complementary-color: harmonious-mix($first-color, $second-color);

// Analogous Colors

$analogous-color: adjust-hue($complementary-color, -40);
$complementary-analogous: mix($analogous-color, $complementary-color, 66);

// Complementary Neutrals, highlight, midtone, shadow

$complementary-neutral: mix-neutral($complementary-color);
$complementary-neutral-light: lighten($complementary-neutral, 33);
$complementary-neutral-dark: darken($complementary-neutral, 33);

// Primary neutrals, highlight, midtone, shadow`

$primary-neutral: mix-neutral($primary-color);
$primary-neutral-light: lighten($primary-neutral, 33);
$primary-neutral-dark: darken($primary-neutral, 33);

// Primary tint and shade

$primary-light: mix($primary-neutral-light, $primary-color, 45%);
$primary-dark: mix($primary-neutral-dark, $primary-color, 45%);

$complementary-light: mix($complementary-neutral-light, $complementary-color, 45%);
$complementary-dark: mix($complementary-neutral-dark, $complementary-color, 45%);

// Pure neutrals, highlight, midtone, shadow

$white: lighten($primary-neutral-light, 15);
$neutral-gray: grayscale($primary-neutral);
$primary-gray: mix($primary-color, $complementary-color, 30);
$complementary-gray: mix($complementary-color, $primary-color, 63);
$black: grayscale($complementary-neutral-dark);

body {
    // include bkgd-gradient mixin
    @include bkgd-gradient($primary-light, $white);
    color: $type-color;
}

a {
    color: $complementary-color;
    
    &:hover,
    &:active {
        color: $complementary-light;
    }
}

.wrapper {
    // lighten Sass function
    background-color: lighten($neutral-gray, 25%);
}

nav {
    // transparentize Sass function
    background-color: transparentize($primary-dark, 0.2);
    
    a {
        color: $primary-light;

        &:hover,
        &:active {
            color: $secondary-neutral-light;
        }
    }
}

main {
    background-color: $card-header-background;
}